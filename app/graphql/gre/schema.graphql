type Activity implements Node {
  id: ID!
  isMeal: Boolean!
  memo: String
  reactions: [Reaction!]!
  type: ActivityType!
  user: User!
}

"""
The connection type for Activity.
"""
type ActivityConnection {
  """
  A list of edges.
  """
  edges: [ActivityEdge]

  """
  A list of nodes.
  """
  nodes: [Activity]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ActivityEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Activity
}

enum ActivityType {
  BREAKFAST
  DINNER
  LUNCH
  SLEEP
  WAKEUP
}

type BadRegisterUserInput implements Error {
  """
  The HTTP status code that most closely matches the reason for the error.
  """
  code: Int!

  """
  List of errors for email.
  """
  email: [String!]!

  """
  Human-readable description of the error.
  """
  message: String!

  """
  List of errors for name.
  """
  name: [String!]!
}

type BadRequest implements Error {
  """
  The HTTP status code that most closely matches the reason for the error.
  """
  code: Int!

  """
  Human-readable description of the error.
  """
  message: String!
}

type Conflict implements Error {
  """
  The HTTP status code that most closely matches the reason for the error.
  """
  code: Int!

  """
  Human-readable description of the error.
  """
  message: String!
}

"""
Autogenerated input type of CreateActivity
"""
input CreateActivityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  memo: String
  type: ActivityType!
}

union CreateActivityResult = Activity | Forbidden

"""
Common interface for application errors.
"""
interface Error {
  """
  The HTTP status code that most closely matches the reason for the error.
  """
  code: Int!

  """
  Human-readable description of the error.
  """
  message: String!
}

type Forbidden implements Error {
  """
  The HTTP status code that most closely matches the reason for the error.
  """
  code: Int!

  """
  Human-readable description of the error.
  """
  message: String!
}

type Mutation {
  createActivity(
    """
    Parameters for CreateActivity
    """
    input: CreateActivityInput!
  ): CreateActivityResult!
  reactToActivity(
    """
    Parameters for ReactToActivity
    """
    input: ReactToActivityInput!
  ): ReactToActivityResult!
  registerUser(
    """
    Parameters for RegisterUser
    """
    input: RegisterUserInput!
  ): RegisterUserResult!
}

interface Node {
  id: ID!
}

type NotFound implements Error {
  """
  The HTTP status code that most closely matches the reason for the error.
  """
  code: Int!

  """
  Human-readable description of the error.
  """
  message: String!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  me: User
  node(id: ID!): Node
  timeline(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActivityConnection!
}

"""
Autogenerated input type of ReactToActivity
"""
input ReactToActivityInput {
  activityId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  message: String!
}

union ReactToActivityResult = BadRequest | NotFound | Reaction

type Reaction implements Node {
  activity: Activity!
  id: ID!
  isAnonymous: Boolean!
  message: String!
  reactedUser: User
}

"""
Autogenerated input type of RegisterUser
"""
input RegisterUserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  name: String!
}

union RegisterUserResult = BadRegisterUserInput | Conflict | User

type User implements Node {
  activities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ActivityConnection!
  email: String!
  id: ID!
  name: String!
  reactions: [Reaction!]!
}
